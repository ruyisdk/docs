import{_ as a,c as i,ag as n,o as l}from"./chunks/framework.Bie0PW65.js";const e="/docs/assets/1736323322849.CZf2BVxf.png",p="/docs/assets/1736245928403.BmGgv-sT.png",g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh/milkv-duo/2-ruyisdk-sdk.md","filePath":"zh/milkv-duo/2-ruyisdk-sdk.md","lastUpdated":1737610063000}'),t={name:"zh/milkv-duo/2-ruyisdk-sdk.md"};function d(h,s,r,o,k,c){return l(),i("div",null,s[0]||(s[0]=[n(`<h2 id="使用-ruyi-为-milkv-duo-安装镜像、编译器等开发环境" tabindex="-1">使用 ruyi 为 milkv duo 安装镜像、编译器等开发环境 <a class="header-anchor" href="#使用-ruyi-为-milkv-duo-安装镜像、编译器等开发环境" aria-label="Permalink to &quot;使用 ruyi 为 milkv duo 安装镜像、编译器等开发环境&quot;">​</a></h2><h3 id="pc上安装-ruyi" tabindex="-1">PC上安装 ruyi <a class="header-anchor" href="#pc上安装-ruyi" aria-label="Permalink to &quot;PC上安装 ruyi&quot;">​</a></h3><ol><li><p>可从RuyiSDK仓库下载最新版本 <a href="https://gitee.com/link?target=https%3A%2F%2Fmirror.iscas.ac.cn%2Fruyisdk%2Fruyi%2Freleases%2F" target="_blank" rel="noreferrer">https://mirror.iscas.ac.cn/ruyisdk/ruyi/releases/</a></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>wget https://mirror.iscas.ac.cn/ruyisdk/ruyi/releases/0.24.0/ruyi.amd64  #从软件源下载ruyi本体</span></span>
<span class="line"><span>chmod +x ruyi.amd64  #给ruyi添加执行权限</span></span>
<span class="line"><span>sudo cp ruyi.amd64 /usr/local/bin/ruyi #将ruyi本体改名为ruyi，并放入PATH</span></span>
<span class="line"><span>ruyi version </span></span>
<span class="line"><span>ruyi update  #更新软件包索引</span></span></code></pre></div></li></ol><h3 id="安装编译器-编译" tabindex="-1">安装编译器，编译 <a class="header-anchor" href="#安装编译器-编译" aria-label="Permalink to &quot;安装编译器，编译&quot;">​</a></h3><ol start="2"><li><p>安装 gnu-milkv-milkv-duo-musl 编译器</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#查看软件源的资源</span></span>
<span class="line"><span>#ruyi list</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#安装指定的工具链</span></span>
<span class="line"><span>ruyi install gnu-milkv-milkv-duo-bin</span></span>
<span class="line"><span>#从返回信息中可以查看安装的路径，如 ~/.local/share/ruyi/binaries/x86_64/gnu-milkv-milkv-duo-bin-0.20240731.0+git.67688c7335e7</span></span></code></pre></div></li><li><p>创建和使用Duo编译环境</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#查看ruyi预配置环境</span></span>
<span class="line"><span>#ruyi list profiles</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#创建一个虚拟环境（自定义命名milkv-venv）：工具链为gnu-milkv-milkv-duo-musl-bin</span></span>
<span class="line"><span>#ruyi venv -t gnu-milkv-milkv-duo-musl-bin milkv-duo ./venv-milkvduo</span></span>
<span class="line"><span>ruyi venv -t gnu-milkv-milkv-duo-musl-bin generic ./venv-milkvduo-generic</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#激活虚拟环境</span></span>
<span class="line"><span>source venv-milkvduo-generic/bin/ruyi-activate</span></span></code></pre></div></li><li><p>下载 duo-example 源码并使用 gnu-milkv-milkv-duo-musl 工具链进行交叉编译</p><blockquote><p>当 ruyisdk 还未集成并提供开发板对应的 example 时，可自己下载或者导入想要编译的源码。</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#下载duo-example</span></span>
<span class="line"><span>mkdir milkv-duo-examples </span></span>
<span class="line"><span>cd milkv-duo-examples</span></span>
<span class="line"><span>ruyi extract milkv-duo-examples   #资源名可通过ruyi list查询</span></span></code></pre></div></li><li><p>编译源码</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cd hello-world</span></span>
<span class="line"><span>ls -al</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#执行编译</span></span>
<span class="line"><span>riscv64-unknown-linux-musl-gcc -g -o helloworld helloworld.c  </span></span>
<span class="line"><span></span></span>
<span class="line"><span>riscv64-unknown-linux-musl-gcc -march=rv64imafdcv0p7xthead -mabi=lp64d -O3 -g -o helloworld helloworld.c  </span></span>
<span class="line"><span></span></span>
<span class="line"><span>riscv64-unknown-linux-musl-gcc -mcpu=c906fdv -march=rv64imafdcv0p7xthead -mcmodel=medany -mabi=lp64d -O3 -DNDEBUG -g -o helloworld helloworld.c  -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64</span></span>
<span class="line"><span></span></span>
<span class="line"><span># venv-milkvduo-generic虚拟环境下，上述3个命令都能编译成功。但是venv-milkvduo下，会报错：https://github.com/ruyisdk/ruyi/issues/255</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#查看</span></span>
<span class="line"><span>ls -al</span></span>
<span class="line"><span>file helloworld</span></span>
<span class="line"><span>#helloworld: ELF 64-bit LSB executable, UCB RISC-V, RVC, double-float ABI, version 1 (SYSV), dynamically linked, interpreter /lib/ld-musl-riscv64v0p7_xthead.so.1, with debug_info, not stripped</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#退出虚拟环境</span></span>
<span class="line"><span>ruyi-deactivate</span></span></code></pre></div><p>至此，编译就完成了。目前生成了RISC-V目标程序。在当前PC端是无法运行的，需要拷贝到 milkv duo 开发板上运行。</p><p>接下来就再介绍如何使用ruyisdk系统安装工具给 RISC-V 设备安装镜像，并运行上述的目标程序。</p></li></ol><h3 id="运行目标程序" tabindex="-1">运行目标程序 <a class="header-anchor" href="#运行目标程序" aria-label="Permalink to &quot;运行目标程序&quot;">​</a></h3><h4 id="rv设备端-烧录镜像" tabindex="-1">RV设备端：烧录镜像 <a class="header-anchor" href="#rv设备端-烧录镜像" aria-label="Permalink to &quot;RV设备端：烧录镜像&quot;">​</a></h4><ol><li><p>【建议，但非必须，可以避免烧录过程出问题】格式化SD卡，准备烧录镜像</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#准备：sd卡插入读卡器，读卡器插入PC。先格式化并删除已有的分区</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#查看sd卡设备节点（我环境下一般是/dev/sdb）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> df</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -h</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#umount：（按实际情况修改设备节点）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> umount</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dev/sdb1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> umount</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dev/sdb2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 删除sd卡所有分区（/dev/sdb1 和 /dev/sdb2）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wipefs</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --all</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dev/sdb</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#格式化：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mkfs.ext4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dev/sdb</span></span></code></pre></div></li><li><p>烧录系统到sd卡</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#烧录镜像</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ruyi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> device</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> peovision</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#后续按照提示一步步执行，选择 milkv duo 设备对应的相关参数和选项，按照提示执行即可。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 烧录完成后，请将sd卡插入到 milkv duo sd卡卡槽中，将 milkv duo 设备通过 usb-typec 线通电，通电后将自动启动，启动成功后执行如下操作连接 milkv duo 设备进行远程操作</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root@192.168.42.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">root</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 密码:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> milkv</span></span></code></pre></div></li></ol><h4 id="执行目标程序" tabindex="-1">执行目标程序 <a class="header-anchor" href="#执行目标程序" aria-label="Permalink to &quot;执行目标程序&quot;">​</a></h4><ol><li><p>PC：执行scp拷贝命令将目标程序传输到目标设备</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ scp helloworld root@192.168.42.1:/root/</span></span></code></pre></div></li><li><p>执行目标程序 发送成功后，在 ssh 或者串口登陆的终端中运行 <code>./helloworld</code>，会打印 <code>Hello, World!</code></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#连接远程设备</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root@192.168.42.1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">root</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 密码:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> milkv</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@milkv]~# ./helloworld</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hello,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> World!</span></span></code></pre></div></li></ol><h3 id="gdbserver远程调试" tabindex="-1">gdbserver远程调试 <a class="header-anchor" href="#gdbserver远程调试" aria-label="Permalink to &quot;gdbserver远程调试&quot;">​</a></h3><p>参考：<a href="https://gitee.com/yunxiangluo/milkv-duo/blob/master/README.md#5-%E7%A8%8B%E5%BA%8F%E8%B0%83%E8%AF%95" target="_blank" rel="noreferrer">https://gitee.com/yunxiangluo/milkv-duo/blob/master/README.md#5-程序调试</a></p><h4 id="准备gdbserver" tabindex="-1">准备gdbserver <a class="header-anchor" href="#准备gdbserver" aria-label="Permalink to &quot;准备gdbserver&quot;">​</a></h4><p>原厂buildroot镜像不自带gdbsever，可拷贝原厂gdbserver可执行文件或使用RuyiSDK添加gdbsever后重新构建的镜像。</p><ol><li><p>下载原厂gdbserver可执行程序：<a href="https://github.com/milkv-duo/duo-buildroot-sdk/blob/develop/ramdisk/rootfs/public/gdbserver/riscv_musl/usr/bin/gdbserver" target="_blank" rel="noreferrer">https://github.com/milkv-duo/duo-buildroot-sdk/blob/develop/ramdisk/rootfs/public/gdbserver/riscv_musl/usr/bin/gdbserver</a></p></li><li><p>将上述下载的gdbserver拷贝到milkv duo设备的path路径下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gdbserver</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root@192.168.42.1:/usr/bin/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root@192.168.42.1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;chmod +x /usr/bin/gdbserver&quot;</span></span></code></pre></div></li><li><p>准备一个方便打断点和单步跟踪的例子 (我命名为sum.c)</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdio.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> start </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> end </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;I will begin</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(start, end);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;running done, result is: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, start, end, n);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>按照前面的章节进行编译构建得到目标程序</p><ul><li><p>方法1：eclipse IDE，工程右键 &gt; Build project</p></li><li><p>方法2：命令行执行 make</p></li><li><p>方法3：gcc命令</p><ul><li>~/milkv/duo/duo-examples/host-tools/gcc/riscv64-linux-musl-x86_64/bin/riscv64-unknown-linux-musl-gcc -mcpu=c906fdv -march=rv64imafdcv0p7xthead -O3 -g -o helloworld helloworld.c #调试的时候报错，找不到库（待进一步确认） <img src="`+e+`" alt="1736323322849"></li><li>~/milkv/duo/duo-examples/host-tools/gcc/riscv64-linux-musl-x86_64/bin/riscv64-unknown-linux-musl-gcc -g -o helloworld helloworld.c -static #静态链接，调试顺利</li></ul></li></ul></li><li><p>调试</p><p>使用 gdbserver 进行调试，详细补充见下面章节。</p></li></ol><h4 id="调试步骤" tabindex="-1">调试步骤 <a class="header-anchor" href="#调试步骤" aria-label="Permalink to &quot;调试步骤&quot;">​</a></h4><ol><li><p>milkvduo设备端（helloworld所在目录下操作）:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[root@milkv-duo]~/example/testhelloworld# gdbserver :2345 ./helloworld</span></span>
<span class="line"><span>Process ./helloworld created; pid = 1802</span></span>
<span class="line"><span>Listening on port 2345</span></span></code></pre></div></li><li><p>PC端（helloworld.c所在目录下操作）：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cd ~/milkv-duo-examples/hello-world</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#查看gdb版本，启动调试</span></span>
<span class="line"><span>#~/milkv/duo/duo-examples/host-tools/gcc/riscv64-linux-musl-x86_64/bin/riscv64-unknown-linux-musl-gdb --version</span></span>
<span class="line"><span>#~/milkv/duo/duo-examples/host-tools/gcc/riscv64-linux-musl-x86_64/bin/riscv64-unknown-linux-musl-gdb ./helloworld</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#这里尽量使用ruyi已经提供的功能，基于之前创建的虚拟环境，激活虚拟环境，在虚拟环境下编译（感觉好处就是不用设置环境变量，gcc也不用指定绝对路径</span></span>
<span class="line"><span>source ~/venv-milkvduo/bin/ruyi-activate </span></span>
<span class="line"><span>riscv64-unknown-linux-musl-gdb --version</span></span>
<span class="line"><span>riscv64-unknown-linux-musl-gdb ./helloworld</span></span>
<span class="line"><span></span></span>
<span class="line"><span>target remote 192.168.42.1:2345   #端口号需要跟gdbserver端一致</span></span>
<span class="line"><span></span></span>
<span class="line"><span>break helloworld.c:8              #在第8行设置断点</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#下面几个可能常用，请按需灵活使用</span></span>
<span class="line"><span>c                                 #contuinu，继续程序的运行,直到遇到下一个断点</span></span>
<span class="line"><span>n                                 #执行下一条语句,如果该语句为函数调用,不会进入函数内部执行(即不会一步步地调试函数内部语句)</span></span>
<span class="line"><span>print result                      #打印内部变量result</span></span>
<span class="line"><span>disp result                       #跟踪查看某个变量,每次停下来都显示它的值</span></span></code></pre></div></li></ol><p><img src="`+p+`" alt="1736245928403"></p><p>GDB更详细的使用方法可参考GDB帮助。</p><table tabindex="0"><thead><tr><th>命令</th><th>命令缩写</th><th></th><th>命令说明</th></tr></thead><tbody><tr><td>list</td><td>l</td><td></td><td>显示多行源代码</td></tr><tr><td>break</td><td>b</td><td></td><td>设置断点,程序运行到断点的位置会停下来</td></tr><tr><td>info</td><td>i</td><td></td><td>描述程序的状态</td></tr><tr><td>run</td><td>r</td><td>不能用？</td><td>开始运行程序</td></tr><tr><td>display</td><td>disp</td><td></td><td>跟踪查看某个变量,每次停下来都显示它的值</td></tr><tr><td>step</td><td>s</td><td></td><td>执行下一条语句,如果该语句为函数调用,则进入函数执行其中的第一条语句</td></tr><tr><td>next</td><td>n</td><td></td><td>执行下一条语句,如果该语句为函数调用,不会进入函数内部执行(即不会一步步地调试函数内部语句)</td></tr><tr><td>print</td><td>p</td><td></td><td>打印内部变量值</td></tr><tr><td>continue</td><td>c</td><td></td><td>继续程序的运行,直到遇到下一个断点</td></tr><tr><td>set var name=v</td><td></td><td></td><td>设置变量的值</td></tr><tr><td>start</td><td>st</td><td></td><td>开始执行程序,在main函数的第一条语句前面停下来</td></tr><tr><td>file</td><td></td><td></td><td>装入需要调试的程序</td></tr><tr><td>kill</td><td>k</td><td></td><td>终止正在调试的程序</td></tr><tr><td>watch</td><td></td><td></td><td>监视变量值的变化</td></tr><tr><td>backtrace</td><td>bt</td><td></td><td>产看函数调用信息(堆栈)</td></tr><tr><td>frame</td><td>f</td><td></td><td>查看栈帧</td></tr><tr><td>quit</td><td>q</td><td></td><td>退出GDB环境</td></tr></tbody></table><h2 id="使用qemu模拟器" tabindex="-1">使用QEMU模拟器 <a class="header-anchor" href="#使用qemu模拟器" aria-label="Permalink to &quot;使用QEMU模拟器&quot;">​</a></h2><p>针对 gnu-milkv-milkv-duo-musl-bin ，暂无配套的qemu模拟器。</p><h3 id="下载安装qemu" tabindex="-1">下载安装qemu <a class="header-anchor" href="#下载安装qemu" aria-label="Permalink to &quot;下载安装qemu&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#查询并安装qemu</span></span>
<span class="line"><span>ruyi list | grep &quot;qemu&quot;</span></span>
<span class="line"><span>ruyi install qemu-user-riscv-upstream</span></span>
<span class="line"><span>#ruyi install qemu-system-riscv-upstream</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#创建带qemu的虚拟环境</span></span>
<span class="line"><span>ruyi venv -t gnu-milkv-milkv-duo-musl-bin -e qemu-user-riscv-upstream  milkv-duo  venv-milkvduo-qemuuser</span></span>
<span class="line"><span>source ~/venv-milkvduo-qemuuser/bin/ruyi-activate </span></span>
<span class="line"><span></span></span>
<span class="line"><span>ruyi-qemu ~/milkv-duo-examples/hello-world/helloworld</span></span>
<span class="line"><span>ruyi-qemu ~/ews-milkvduo-t01/sumdemo/sumdemo</span></span>
<span class="line"><span>qemu-riscv64: warning: disabling zfa extension because privilege spec version does not match</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ruyi-deactivate </span></span>
<span class="line"><span></span></span>
<span class="line"><span>------------</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ruyi venv -t gnu-milkv-milkv-duo-musl-bin -e qemu-user-riscv-upstream  generic  venv-milkvduo-generic-qemuuser</span></span>
<span class="line"><span>ruyi-qemu ~/milkv-duo-examples/hello-world/helloworld</span></span>
<span class="line"><span>ruyi-qemu ~/ews-milkvduo-t01/sumdemo/sumdemo</span></span>
<span class="line"><span>没有任何输出</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>ruyi venv -t gnu-milkv-milkv-duo-musl-bin -e qemu-user-riscv-xthead  milkv-duo  venv-milkvduo-x</span></span>
<span class="line"><span>qemu-riscv64: unable to find CPU model &#39;thead-c906&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>---------换编译器</span></span>
<span class="line"><span>ruyi venv -t gnu-upstream -e qemu-user-riscv-upstream  generic  venv-generic</span></span></code></pre></div><h3 id="模拟运行" tabindex="-1">模拟运行 <a class="header-anchor" href="#模拟运行" aria-label="Permalink to &quot;模拟运行&quot;">​</a></h3><h4 id="配置1" tabindex="-1">配置1 <a class="header-anchor" href="#配置1" aria-label="Permalink to &quot;配置1&quot;">​</a></h4><p>TOOLCHAIN_PREFIX := ~/.local/share/ruyi/binaries/x86_64/gnu-upstream-0.20231212.0/bin/riscv64-unknown-linux-gnu- CFLAGS := -g -static LDFLAGS := -D_FILE_OFFSET_BITS=64</p><p>在RV设备上运行： [root@milkv-duo]~/target# ./helloworld Hello, Welcome to the world of RuyiSDK!</p><p>在host上模拟运行： «Ruyi venv-generic» phebe@phebe-virtual-machine:~/milkv-duo-examples/hello-world$ ruyi-qemu helloworld Hello, Welcome to the world of RuyiSDK!</p><h4 id="配置2" tabindex="-1">配置2 <a class="header-anchor" href="#配置2" aria-label="Permalink to &quot;配置2&quot;">​</a></h4><p>TOOLCHAIN_PREFIX := ~/milkv/duo/duo-examples/host-tools/gcc/riscv64-linux-x86_64/bin/riscv64-unknown-linux-gnu- CFLAGS := -g -static LDFLAGS := -D_FILE_OFFSET_BITS=64 在RV设备上运行： [root@milkv-duo]~/target# ./helloworld Hello, Welcome to the world of RuyiSDK!</p><p>在host上模拟运行： «Ruyi venv-generic» phebe@phebe-virtual-machine:~/milkv-duo-examples/hello-world$ ruyi-qemu helloworld</p><blockquote><p>无任何输出，也无任何报错</p></blockquote><h4 id="配置3" tabindex="-1">配置3 <a class="header-anchor" href="#配置3" aria-label="Permalink to &quot;配置3&quot;">​</a></h4><p>TOOLCHAIN_PREFIX := ~/milkv/duo/duo-examples/host-tools/gcc/riscv64-linux-musl-x86_64/bin/riscv64-unknown-linux-musl- CFLAGS := -g -static LDFLAGS := -D_FILE_OFFSET_BITS=64</p><p>«Ruyi venv-milkvduo-qemuuser» phebe@phebe-virtual-machine:~/milkv-duo-examples/hello-world$ ruyi-qemu ./helloworld qemu-riscv64: warning: disabling zfa extension because privilege spec version does not match Hello, Welcome to the world of RuyiSDK!</p><h4 id="配置4" tabindex="-1">配置4 <a class="header-anchor" href="#配置4" aria-label="Permalink to &quot;配置4&quot;">​</a></h4><p>TOOLCHAIN_PREFIX := ~/milkv/duo/duo-examples/host-tools/gcc/riscv64-linux-musl-x86_64/bin/riscv64-unknown-linux-musl- CFLAGS := -mcpu=c906fdv -march=rv64imafdcv0p7xthead -g -I/home/phebe/milkv/duo/duo-examples/include/system -static LDFLAGS := -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64 -L/home/phebe/milkv/duo/duo-examples/libs/system/musl_riscv64</p><p>«Ruyi venv-milkvduo-qemuuser» phebe@phebe-virtual-machine:~/milkv-duo-examples/hello-world$ ruyi-qemu ./helloworld qemu-riscv64: warning: disabling zfa extension because privilege spec version does not match</p><blockquote><p>提示zfa，但是没有运行结果输出</p></blockquote>`,40)]))}const m=a(t,[["render",d]]);export{g as __pageData,m as default};
