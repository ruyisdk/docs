import{_ as l,c as o,a2 as r,o as t}from"./chunks/framework.DxHMuem5.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"old/introduction/requirement.md","filePath":"old/introduction/requirement.md","lastUpdated":1735203552000}'),a={name:"old/introduction/requirement.md"};function e(n,i,u,p,R,s){return t(),o("div",null,i[0]||(i[0]=[r('<h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><p>RuyiSDK 是一个旨在提供给一个一体化集成开发环境的产品计划。从 2023 年开始筹备，计划用三年时间为 RISC-V 开发者提供一个完整的、全家桶式的全功能开发环境。</p><h2 id="ruyisdk-的目标" tabindex="-1">RuyiSDK 的目标 <a class="header-anchor" href="#ruyisdk-的目标" aria-label="Permalink to &quot;RuyiSDK 的目标&quot;">​</a></h2><ol><li>开发者购买了 (几乎) 任何一款 RISC-V 开发板或模组，都可以通过 RuyiSDK 系统获得硬件资料说明、固件 / 软件更新、调试支持等。</li><li>开发者可以指定任何常用的 RISC-V 扩展指令集架构组合，都可以通过 RuyiSDK 系统生成客户所需的操作系统、工具链、语言执行环境 (运行时或虚拟机)、计算库、应用框架等。尤其强调 RuyiSDK 将完全支持 Vector 0.7.1 和 RVP 0.5.2 等已经大规模硅化的草案 标准 (or 厂商定制扩展)。</li><li>培育运营一个活跃全面的开发者交流社区。</li></ol><h2 id="ruyisdk-架构示意图" tabindex="-1">RuyiSDK 架构示意图 <a class="header-anchor" href="#ruyisdk-架构示意图" aria-label="Permalink to &quot;RuyiSDK 架构示意图&quot;">​</a></h2><p>![[1703147196780.png]]RuyiSDK 的组成</p><p>RuyiSDK 主要包含了一个组件管理器（也称为包管理器，Ruyi Repo）、一个集成开发环境（Ruyi IDE）、一个开发者交流社区；</p><ul><li><p>组件管理器包含一个在线软件源 （Ruyi Repo） 和 一个包管理工具（ruyi）。在线软件源即 Ruyi Repo 集中存储了RISC-V集成开发环境所需的编译工具链、调试工具、模拟器、运行环境、文档、代码、工具、target系统镜像等内容；包管理器工具则是用于与在线软件源交互的工具，它提供了一套命令行接口（ruyi）或图形用户界面（GUI未来可能提供），使开发者能够搜索、安装、更新和管理软件包。包管理工具负责从在线软件源中获取软件包的信息，解析软件包的依赖关系，并自动处理依赖关系的下载和安装。</p></li><li><p>集成开发环境（Ruyi IDE）则是一个专门用来开发能够运行在RISC-V架构设备上的软件和应用的工具箱。可以帮助开发者编写和测试自己的程序。</p><p>想象一下，你要做一款能够运行在RISC-V设备上的应用程序，比如用C或者C++语言开发一个图像识别的程序，Ruyi IDE 就像是一个你的工作室，里面有各种各样的工具可以帮助你完成这个任务。首先创建项目，从RuyiSDK包管理器中下载和安装所需的编译工具链、调试工具、模拟器等工具，然后在文本编辑器中完成对代码的编辑，接着对项目进行编译构建获得RISC-V架构的可执行程序，最后在模拟器或者RISC-V开发板上进行运行和测试。如果代码需要调试，也可通过调试工具进行代码调试。这一过程和x86下的开发、编译构建、调试、运行的流程是一致的，只是适用于当前开发语言及目标运行设备的RISC-V的编译工具链、模拟器等软件和工具都可以从Ruyi Repo中获取，在安装和IDE初始设置时都已经被集成到 Ruyi IDE 之中，用户无需为环境搭建耗费精力。</p></li><li><p>开发者交流社区则提供文档和教程、论坛和技术讨论区、博客和文档等等功能，目的是为RISC-V开发者提供一个开放的交流平台，提供互助式技术支持和资源共享，聚集RISC-V开发者并推动RISC-V生态系统的发展。</p></li></ul><h2 id="ruyisdk-模块需求说明" tabindex="-1">RuyiSDK 模块需求说明 <a class="header-anchor" href="#ruyisdk-模块需求说明" aria-label="Permalink to &quot;RuyiSDK 模块需求说明&quot;">​</a></h2><blockquote><p>说明：这是一个初步的需求设想，具体还需要结合技术可行性等进行进一步的调整。供参考。</p></blockquote><h3 id="ruyi-包管理器" tabindex="-1">RUYI 包管理器 <a class="header-anchor" href="#ruyi-包管理器" aria-label="Permalink to &quot;RUYI 包管理器&quot;">​</a></h3><h4 id="ruyi在线软件源-ruyi-repo" tabindex="-1">RUYI在线软件源（Ruyi Repo） <a class="header-anchor" href="#ruyi在线软件源-ruyi-repo" aria-label="Permalink to &quot;RUYI在线软件源（Ruyi Repo）&quot;">​</a></h4><ol><li>软件源的管理内容包括以下内容： <ol><li>GNU和LLVM编译工具链</li><li>调试工具（GDB、LLDB）</li><li>模拟器（qemu、spike，……）</li><li>运行环境（sysroot / rootfs）</li><li>工具：包括且不限于Ruyi IDE、架构图中的各种工具等</li><li>代码（库、示例 etc.）</li><li>文档</li><li>目标运行环境的RISC-V系统镜像文件</li></ol></li><li>软件源内包的元数据包含并不限于：发布厂商、版本信息、资源类型、下载链接、文档资源等各种信息（支持属性扩展）等属性信息；如编译工具链有不同厂商发布的，不同版本的软件资源需要进行管理（如GNU和LLVM目前有三种类型：upstream、PLCT、xthead，随着版本的更新和发布，每种类型会产生诸如vX.X这种多个版本）。</li></ol><h4 id="ruyi包管理工具-ruyi" tabindex="-1">RUYI包管理工具（ruyi） <a class="header-anchor" href="#ruyi包管理工具-ruyi" aria-label="Permalink to &quot;RUYI包管理工具（ruyi）&quot;">​</a></h4><ol><li>实现一套命令行接口（CLI），用于与在线软件源交互。 <ol><li><p>使开发者能够搜索、安装、更新、卸载和管理软件包。</p></li><li><p>包管理工具负责从在线软件源中获取软件包的信息，解析软件包的依赖关系，并自动处理依赖关系的下载和安装。</p></li><li><p>能够支持工具自身的升级、卸载；</p></li><li><p>能够支持在线软件源中不同类型、不同版本、不同厂商、不同适用环境的软件包的搜索：</p><ul><li>按照name搜索</li><li>按照版本搜索</li><li>按照可支持的扩展指令集搜索</li><li>按照资源类型搜索</li><li>按照可适用的开发板（或目标运行环境）搜索</li><li>……</li></ul></li></ol></li><li>实现一套图形用户界面（GUI）工具，用于与在线软件源交互。功能与上述CLI接口类似；（待定）</li><li>三架构支持：工具需要支持x86、aarch64、RISC-V三种架构的主流Linux系统（包含但不限于openEuler、Debian、Ubuntu、Fedora等）；</li></ol><h3 id="ruyi-ide" tabindex="-1">Ruyi IDE <a class="header-anchor" href="#ruyi-ide" aria-label="Permalink to &quot;Ruyi IDE&quot;">​</a></h3><p>针对RISC-V开发者使用的集成开发环境（IDE）需要具备如下功能：</p><ol><li><p><strong>项目管理工具</strong>：提供项目管理功能，使开发者能够轻松创建、组织和管理他们的RISC-V项目。这包括创建新项目、导入现有项目、管理依赖和库等。</p></li><li><p><strong>代码编辑器</strong>：提供一个功能强大的代码编辑器，支持开发语言的语法高亮显示、代码自动完成、代码导航、智能感知、错误检查、代码片段管理、版本控制集成、调试支持等功能，以提高开发效率、减少错误，并提供更好的代码编写和维护体验。</p><ul><li><p><strong>代码编辑器常见功能详细说明：</strong></p><ol><li>语法高亮（Syntax Highlighting）：根据编程语言的语法规则，对代码进行着色，以增强可读性和代码理解性。</li><li>自动完成（Auto Completion）：根据当前上下文，在输入代码的过程中自动弹出变量、函数、类名等的建议，以加快编码速度和减少拼写错误。</li><li>智能感知（Intelligent Code Sense）：通过静态分析和语义理解，提供关于代码中变量、函数、类等的详细信息，如类型、参数列表、返回值等，以帮助开发者编写正确的代码。</li><li>代码导航（Code Navigation）：提供快速导航到代码的不同部分，如跳转到定义处、跳转到引用处、跳转到函数调用等，以便快速定位和浏览代码。</li><li>重构工具（Refactoring Tools）：提供一系列操作，如重命名、提取函数、提取变量等，以帮助开发者改善代码的结构和可维护性。</li><li>调试支持（Debugging Support）：提供集成的调试器，使开发者能够设置断点、单步执行代码、查看变量的值等，以便调试和排查代码中的问题。</li><li>版本控制集成（Version Control Integration）：与版本控制系统（如Git）集成，提供对代码版本的管理、提交、比较和合并等功能。</li><li>错误检查（Error Checking）：即时检测代码中的语法错误、潜在的逻辑错误或常见的编码错误，并给出相应的警告或错误提示。</li><li>代码片段管理（Code Snippet Management）：提供可重用的代码片段库，包括预定义的模板或用户自定义的代码片段，以便快速插入常用代码块。</li><li>文档生成（Documentation Generation）：根据代码中的注释或特定的标记语言，自动生成代码文档或API文档。</li></ol></li><li><p><strong>语言插件：</strong> 支持C、C++、Java、JavaScript、Python、Rust、Fortran、SAIL、Dart、Chisel等不同的语言类型；</p></li></ul></li><li><p><strong>RISC-V编译器/解释器支持</strong>：集成RISC-V架构的编译器/解释器，使开发者能够编译和构建基于RISC-V指令集的应用程序。（这里不同语言存在差异，需要一一区别和定义）</p></li><li><p><strong>RISC-V模拟器和调试器</strong>：集成一个RISC-V模拟器和调试器，可以模拟和调试RISC-V指令的执行过程。开发者可以在IDE中设置断点、单步执行代码，并查看变量的值和内存的状态，以进行程序的调试和分析。</p></li><li><p><strong>代码分析和优化</strong>：提供代码分析工具，帮助开发者发现潜在的性能问题和错误，并提供优化建议。这包括静态代码分析、性能分析和内存分析等功能，以帮助开发者编写更高效和可靠的RISC-V应用程序。</p></li><li><p><strong>集成文档和教程</strong>：提供与RISC-V相关的文档、教程和示例代码的集成，以帮助开发者学习和使用RISC-V架构。这样，开发者可以在IDE中方便地查阅文档和学习相关知识，加快他们的开发过程。</p></li><li><p>语言虚拟机或运行时环境：一些语言需要在运行时依赖于相应的解释器或语言虚拟机。如Python需要在运行时依赖于相应的解释器或语言虚拟机（如CPython、Jython等）。因此，IDE需要与这些解释器或虚拟机进行集成，以便在IDE中直接运行和调试Python代码。</p></li><li><p>代码执行环境管理：如Python开发中通常会使用虚拟环境（Virtual Environment）来管理依赖和隔离项目环境。IDE可以提供对虚拟环境的支持，使开发者能够方便地创建、激活和管理虚拟环境。</p></li><li><p>交互式解释器和调试器：如Python具有交互式解释器（REPL）的特性，可以在命令行环境中逐行执行代码。IDE可以集成交互式解释器，使开发者能够在IDE中直接执行和调试代码片段，以便进行快速的实验和调试。</p></li><li><p>包管理和库支持：很多开发语言都有丰富的第三方库和包管理工具。如Python是pip、conda等。IDE可以提供对这些工具的集成，以便开发者能够方便地搜索、安装和管理各种Python库和依赖项。</p></li></ol><p>针对RISC-V开发者使用的集成开发环境（IDE）需要具备如下特点：</p><ol><li><strong>可扩展性和插件支持</strong>：支持插件系统，使开发者能够根据自己的需求扩展和定制IDE。这样，他们可以集成其他工具、添加自定义功能，并与其他开发者共享他们的插件。</li><li><strong>并行编译能力：</strong> IDE中，能够为一个项目同时生成不同的运行环境（RISC-V开发板）编译构建出适用该开发板的可执行程序。（待定）</li><li><strong>跨平台兼容性，三架构支持：</strong> Ruyi IDE 本身的安装程序需要支持x86、aarch64、RISC-V三种架构的主流Linux系统（包含但不限于openEuler、Debian、Ubuntu、Fedora等）；</li><li><strong>定制化：</strong> 可视化的集成开发环境的界面部分，除去继承开源软件的部分，自研发/改动部分界面需要个性化定制。</li><li>性能： 要求 Ruyi IDE 能够流畅地运行在主流的PC设备上。</li></ol><p>我们希望，当使用 Ruyi IDE 进行例如图像识别应用程序的开发时，能够得到如下步骤所描述的功能支持：</p><ol><li>打开 Ruyi IDE，并创建一个新的项目或工程。在项目中，你可以组织和管理你的代码文件、资源文件和配置文件等。</li><li>在集成开发环境的文本编辑器中，创建一个新的C/C++源代码文件。在该文件中，你可以编写程序，如图像识别算法的逻辑和实现。</li><li>使用语法高亮功能，集成开发环境会根据编程语言的语法规则，对你的代码进行着色，以增强可读性和代码理解性。</li><li>在编写代码的过程中，Ruyi IDE 提供自动完成功能，根据当前上下文，自动弹出变量、函数和类名的建议，以加快编码速度和减少拼写错误。</li><li>在代码编写过程中，集成开发环境提供智能感知功能，通过静态分析和语义理解，提供关于代码中变量、函数、类等的详细信息，如类型、参数列表、返回值等，以帮助你编写正确的代码。</li><li>在集成开发环境中，你可以使用代码导航功能，快速跳转到代码的不同部分，如跳转到函数的定义处、跳转到变量的引用处，以便快速定位和浏览代码。</li><li>在编写完代码后，使用集成开发环境提供的构建工具进行项目的构建。这可能涉及选择适当的编译选项、设置编译器路径和库路径，以及处理依赖关系。</li><li>Ruyi IDE 通常提供调试器功能，你可以设置断点、逐行调试代码，并观察变量的值，以解决代码中的错误和问题。</li><li>如果需要提高图像识别程序的性能，你可以使用Ruyi IDE 中的性能分析工具，检查代码的瓶颈并进行优化。</li><li>一旦你完成了开发和调试，Ruyi IDE 提供了部署工具，你可以将编译好的图像识别应用程序部署到RISC-V架构的嵌入式设备上，并进行远程调试和监视。</li><li>在开发过程中，Ruyi IDE 还提供版本控制集成工具，帮助你管理代码的版本、进行代码的协作开发和团队协作。如果遇到技术问题，可以在开发者社区进行技术交流获取帮助。</li><li>最后，Ruyi IDE 还提供文档生成工具，可以自动生成代码文档或API文档，帮助你记录和分享你的代码。</li></ol><p>通过 Ruyi IDE 的支持，你可以更高效地开发图像识别应用程序，利用其提供的各种工具和功能，加速开发过程、减少错误，并提供更好的代码编写和维护体验。</p><p>总之，RISC-V开发者的集成开发环境将提供一系列专门针对RISC-V架构的工具和功能（这些工具从包管理器中获取），以帮助开发者更轻松、高效地开发RISC-V应用程序。同时，它提供直观的用户界面、高度可定制的功能和良好的扩展性，以满足不同开发者的需求。</p><h3 id="开发者社区" tabindex="-1">开发者社区 <a class="header-anchor" href="#开发者社区" aria-label="Permalink to &quot;开发者社区&quot;">​</a></h3><p>一个开发者交流社区需要具备以下功能：</p><ol><li><strong>主页/官方网站：</strong> 用来汇聚关于 RuyiSDK 宣发、推广、使用、交流需要的一切资源，是第一级别入口。</li><li><strong>开发者管理：</strong> 用户的注册、登录等账号有关的管理。</li><li><strong>统计功能：</strong> 对主页累计访问量、软件下载次数、用户注册量等信息进行统计，这是用户维护方持续了解开发者社区活跃程度的一种技术支持手段。</li><li><strong>文档和教程</strong>：社区可能提供详细的文档和教程，涵盖RISC-V开发环境的使用指南、编程技巧、调试技巧等方面的内容，帮助开发者快速上手和解决常见问题。</li><li><strong>论坛和讨论区</strong>：提供一个讨论区或论坛，让开发者可以发表问题、分享经验、提供建议等。其他开发者可以回复和讨论，促进交流和知识共享。</li><li>博客和文章：提供开发者撰写博客文章的功能，可以分享技术经验、教程、最佳实践等内容。其他开发者可以浏览和评论这些文章，从中获得有价值的信息。</li><li>问答平台：类似于问答社区，开发者可以发布问题，其他开发者可以回答问题或提供解决方案。这样的平台可以快速解决开发过程中的疑问和难题。</li><li>资源共享：开发者可以共享和下载与RISC-V开发相关的资源，如代码示例、项目模板、库文件等。这有助于加快开发速度和提高效率。</li><li>活动和会议：社区可以组织定期的在线活动、研讨会或会议，让开发者聚集在一起，分享最新的技术趋势、案例研究和实践经验。</li><li>专家支持：社区可能吸引一些RISC-V领域的专家，他们可以提供指导、解答问题，甚至组织在线培训或指导课程，帮助开发者更好地利用集成开发环境进行开发。</li><li>插件和扩展：开发者可以共享和下载与RISC-V集成开发环境相关的插件和扩展，以增强开发环境的功能和灵活性。</li><li>就业和项目机会：社区可以提供就业和项目机会的发布平台，帮助开发者寻找合适的工作机会或参与感兴趣的项目。</li><li>积分和奖励机制：社区可以设立积分和奖励机制，鼓励开发者积极参与交流和贡献。例如，回答问题、分享文章或贡献代码可以获得积分或奖励，提高其在社区中的声誉。</li></ol><p>这样的一个开发者交流社区可以促进RISC-V集成开发环境的用户之间的交流和合作，提供技术支持和资源共享，增加开发者的学习和开发效率，推动RISC-V生态系统的发展。</p>',28)]))}const h=l(a,[["render",e]]);export{y as __pageData,h as default};
