import{_ as i,c as a,ag as l,o as n}from"./chunks/framework.Bie0PW65.js";const u=JSON.parse('{"title":"Milk-V Duo","description":"","frontmatter":{},"headers":[],"relativePath":"zh/milkv-duo/1-milkv-sdk.md","filePath":"zh/milkv-duo/1-milkv-sdk.md","lastUpdated":1737614626000}'),e={name:"zh/milkv-duo/1-milkv-sdk.md"};function t(p,s,h,o,d,k){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="milk-v-duo" tabindex="-1">Milk-V Duo <a class="header-anchor" href="#milk-v-duo" aria-label="Permalink to &quot;Milk-V Duo&quot;">​</a></h1><h2 id="厂商sdk" tabindex="-1">厂商SDK <a class="header-anchor" href="#厂商sdk" aria-label="Permalink to &quot;厂商SDK&quot;">​</a></h2><p>参考链接：</p><ul><li>产品介绍：<a href="https://milkv.io/zh/docs/duo/getting-started/duo" target="_blank" rel="noreferrer">https://milkv.io/zh/docs/duo/getting-started/duo</a></li><li>官方镜像和SDK：<a href="https://milkv.io/zh/docs/duo/getting-started/boot" target="_blank" rel="noreferrer">https://milkv.io/zh/docs/duo/getting-started/boot</a></li></ul><p><img src="https://milkv.io/docs/duo/duo-v1.2.png" alt="Document Pictures"></p><p>Milk-V Duo (即 milkv duo 64M) 是一款基于 CV1800B 芯片的超紧凑型嵌入式开发平台。 它可以运行 Linux 和 RTOS，为专业人士、工业 ODM、AIoT 爱好者、DIY 爱好者和创作者提供可靠、低成本、高性能的平台。</p><p>CV1800B 是一款高性能、低功耗芯片，适用于住宅消费监控 IP 摄像机、家庭智能等众多产品，集成 H.264/H.265 视频压缩编码器和 ISP；支持数字宽动态、3D降噪、去雾、镜头畸变校正等图像增强和校正算法，为客户提供专业级的视频图像质量。</p><p>该芯片集成了自主研发的智能参考解决方案（人体检测、区域检测、运动检测），内置 DDR 以及完整的外围设备和外围设备，为支持客户产品开发和量产提供了高度集成且简单的解决方案。</p><h3 id="sdk资源" tabindex="-1">SDK资源 <a class="header-anchor" href="#sdk资源" aria-label="Permalink to &quot;SDK资源&quot;">​</a></h3><h4 id="镜像" tabindex="-1">镜像 <a class="header-anchor" href="#镜像" aria-label="Permalink to &quot;镜像&quot;">​</a></h4><h5 id="milkv-duo-64m" tabindex="-1">milkv duo 64M <a class="header-anchor" href="#milkv-duo-64m" aria-label="Permalink to &quot;milkv duo 64M&quot;">​</a></h5><ul><li>V1 版本镜像 镜像地址: <a href="https://github.com/milkv-duo/duo-buildroot-sdk/releases/" target="_blank" rel="noreferrer">https://github.com/milkv-duo/duo-buildroot-sdk/releases/</a></li><li>Milk-V Duo 官方 buildroot SDK V1 duo-buildroot-sdk: <a href="https://github.com/milkv-duo/duo-buildroot-sdk" target="_blank" rel="noreferrer">https://github.com/milkv-duo/duo-buildroot-sdk</a></li></ul><h5 id="milkv-duo-duo256m-duos" tabindex="-1">milkv duo Duo256M &amp; DuoS <a class="header-anchor" href="#milkv-duo-duo256m-duos" aria-label="Permalink to &quot;milkv duo Duo256M &amp; DuoS&quot;">​</a></h5><ul><li>V2 版本镜像 V2 版本支持 Duo256M 和 DuoS 的 ARM 核的镜像。 镜像地址：<a href="https://github.com/milkv-duo/duo-buildroot-sdk-v2/releases/" target="_blank" rel="noreferrer">https://github.com/milkv-duo/duo-buildroot-sdk-v2/releases/</a></li><li>Milk-V Duo 官方 buildroot SDK V2 duo-buildroot-sdk-v2: <a href="https://github.com/milkv-duo/duo-buildroot-sdk-v2" target="_blank" rel="noreferrer">https://github.com/milkv-duo/duo-buildroot-sdk-v2</a></li></ul><h4 id="应用示例" tabindex="-1">应用示例 <a class="header-anchor" href="#应用示例" aria-label="Permalink to &quot;应用示例&quot;">​</a></h4><ul><li>Milk-V Duo 官方 C/C++ 应用开发参考示例 duo-examples: <a href="https://github.com/milkv-duo/duo-examples" target="_blank" rel="noreferrer">https://github.com/milkv-duo/duo-examples</a></li><li>Milk-V Duo 官方 TDL-SDK TPU AI 应用开发参考示例 duo-tdl-examples: <a href="https://github.com/milkv-duo/duo-tdl-examples" target="_blank" rel="noreferrer">https://github.com/milkv-duo/duo-tdl-examples</a></li></ul><h3 id="rv设备端-烧录镜像" tabindex="-1">RV设备端：烧录镜像 <a class="header-anchor" href="#rv设备端-烧录镜像" aria-label="Permalink to &quot;RV设备端：烧录镜像&quot;">​</a></h3><ol><li><p>格式化SD卡，准备烧录镜像</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#提前插入sd卡，先格式化并删除已有的分区</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#查看sd卡设备节点（我环境下一般是/dev/sdb）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> df</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -h</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#umount：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> umount</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dev/sdb1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> umount</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dev/sdb2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 删除sd卡所有分区（/dev/sdb1 和 /dev/sdb2）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wipefs</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --all</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dev/sdb</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#格式化：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mkfs.ext4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dev/sdb</span></span></code></pre></div></li><li><p>dd烧录系统到sd卡</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#烧录镜像(img按需置换成所需的文件)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> if=~/Downloads/milkv-duo-sd-v1.1.4.img</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  of=/dev/sdb</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  bs=1M</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> status=progress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 烧录完成后，请将sd卡插入到 milkv duo sd卡卡槽中，将 milkv duo 设备通过 usb-typec 线通电，通电后将自动启动，启动成功后执行如下操作连接 milkv duo 设备进行远程操作</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#ssh-keygen -f &quot;~/.ssh/known_hosts&quot; -R &quot;192.168.42.1&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root@192.168.42.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">root</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 密码:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> milkv</span></span></code></pre></div></li></ol><h3 id="pc开发侧-host" tabindex="-1">PC开发侧(host)： <a class="header-anchor" href="#pc开发侧-host" aria-label="Permalink to &quot;PC开发侧(host)：&quot;">​</a></h3><p>参考官方文档：<a href="https://github.com/milkv-duo/duo-examples/blob/main/README-zh.md" target="_blank" rel="noreferrer">https://github.com/milkv-duo/duo-examples/blob/main/README-zh.md</a></p><ol><li><p>开发环境准备</p><ul><li><p>开发环境说明：使用本地的 Ubuntu 系统，推荐 <code>Ubuntu 22.04 LTS</code> (也可以使用虚拟机中的 Ubuntu 系统、Windows 中 WSL 安装的 Ubuntu、基于 Docker 的 Ubuntu 系统)</p></li><li><p>安装编译依赖的工具 ：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sudo apt-get install wget git make</span></span></code></pre></div></li></ul></li><li><p>下载实例代码并利用代码中的脚本执行开发环境检测</p><ul><li><p>获取 Examples</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git clone https://github.com/milkv-duo/duo-examples.git</span></span></code></pre></div></li><li><p>加载编译环境</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cd duo-examples</span></span>
<span class="line"><span>source envsetup.sh</span></span></code></pre></div><p>第一次加载会自动下载所需的编译工具链，下载后的目录名为 <code>host-tools</code>，下次再加载编译环境时，会检测该目录，如果已存在则不会再次下载。 加载编译环境时需要按提示输入所需编译目标：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Select Product:</span></span>
<span class="line"><span>1. Duo (CV1800B)</span></span>
<span class="line"><span>2. Duo256M (SG2002) or DuoS (SG2000)</span></span></code></pre></div><p>如果目标板是 Duo 则选择 <code>1</code>，如果目标板是 Duo256M 或者 DuoS 则选择 <code>2</code>。</p><p>由于 Duo256M 和 DuoS 支持 RISCV 和 ARM 两种架构，还需要按提示继续选择：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Select Arch:</span></span>
<span class="line"><span>1. ARM64</span></span>
<span class="line"><span>2. RISCV64</span></span>
<span class="line"><span>Which would you like:</span></span></code></pre></div><p>如果测试程序需要在 ARM 系统中运行，选择 <code>1</code>，如果是 RISCV 系统则选择 <code>2</code>。 注意：</p><ul><li>建议查看 envsetup.sh 了解它做了什么： <ul><li><p>脚本检测host是否安装了合适的编译器，没有则会自动下载host-tools(其实就是<a href="https://github.com/milkv-duo/host-tools/tree/master/gcc" target="_blank" rel="noreferrer">gcc</a>) 到 duo-examples 目录下；</p></li><li><p>脚本会通过Export设置环境变量 <code>$(TOOLCHAIN_PREFIX)</code>、<code>$(CFLAGS)</code>和 <code>$(LDFLAGS)</code> 等;当前会话窗口后续都能访问该环境变量，为了了解环境变量信息可以执行下面的脚本，或者直接在 envsetup.sh 最后加上下面的命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;CHIP: &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$CHIP</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;TOOLCHAIN_PREFIX: &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$TOOLCHAIN_PREFIX</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;CC: &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$CC</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;CFLAGS: &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$CFLAGS</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;LDFLAGS: &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$LDFLAGS</span></span></code></pre></div><p>输出的环境变量信息如下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   CHIP:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CV180X</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   TOOLCHAIN_PREFIX:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/milkv/duo/duo-examples/host-tools/gcc/riscv64-linux-musl-x86_64/bin/riscv64-unknown-linux-musl-</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   CC:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/milkv/duo/duo-examples/host-tools/gcc/riscv64-linux-musl-x86_64/bin/riscv64-unknown-linux-musl-gcc</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   CFLAGS:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -mcpu=c906fdv</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -march=rv64imafdcv0p7xthead</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -mcmodel=medany</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -mabi=lp64d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -O3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DNDEBUG</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -I~/milkv/duo/duo-examples/include/system</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   LDFLAGS:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D_LARGEFILE_SOURCE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D_LARGEFILE64_SOURCE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D_FILE_OFFSET_BITS=64</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -L~/milkv/duo/duo-examples/libs/system/musl_riscv64</span></span></code></pre></div></li></ul></li><li><strong>请注意envsetup.sh需要用source执行，这样保证了脚本执行完毕后，设置的环境变量在当前 shell 中一直生效。因此同一个终端中，只需要加载一次编译环境即可。</strong></li><li>当新建一个终端时，环境变量不再有效，需要注意 envsetup.sh 中设置的编译器等环境变量失效，需要再次执行，或者直接设置环境变量。</li></ul></li></ul></li><li><p>编译测试 以 <code>hello-world</code>为例，进入该例子目录直接执行 make 即可：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#make构建</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello-world</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#查看编译后的文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">file</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> helloworld</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#执行，预期会失败，因为编译目标架构为riscv64，host本地是x86_64</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./helloworld</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#bash: ./helloworld: cannot execute binary file: Exec format error</span></span></code></pre></div></li><li><p>目标程序传输到目标设备 编译成功后将生成的 <code>helloworld</code> 可执行程序通过网口或者 USB-NCM 网络等方式传送到 Duo 设备中，比如<a href="https://github.com/milkv-duo/duo-buildroot-sdk/releases" target="_blank" rel="noreferrer">默认固件</a>支持的 USB-NCM 方式，Duo 的 IP 为 <code>192.168.42.1</code>，用户名是 <code>root</code>，密码是 <code>milkv</code>。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ scp helloworld root@192.168.42.1:/root/</span></span></code></pre></div></li><li><p>执行目标程序 发送成功后，在 ssh 或者串口登陆的终端中运行 <code>./helloworld</code>，会打印 <code>Hello, World!</code></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#sd卡插入milkv duo</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#milkv duo 通过 type-c+usb 连接线接 host设备（USB口接host）；</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#连接远程设备</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#ssh-keygen -f &quot;~/.ssh/known_hosts&quot; -R &quot;192.168.42.1&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root@192.168.42.1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@milkv]~# ./helloworld</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hello,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> World!</span></span></code></pre></div></li></ol><p><strong>至此，我们的编译开发环境就可以正常使用了</strong></p><p>其它参考：<a href="https://gitee.com/yunxiangluo/milkv-duo/blob/master/README.md" target="_blank" rel="noreferrer">https://gitee.com/yunxiangluo/milkv-duo/blob/master/README.md</a></p>`,23)]))}const c=i(e,[["render",t]]);export{u as __pageData,c as default};
