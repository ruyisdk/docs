import{_ as i,c as a,a2 as n,o as l}from"./chunks/framework.oYgP5hCw.js";const c=JSON.parse('{"title":"管理 Ruyi 软件包","description":"","frontmatter":{},"headers":[],"relativePath":"zh/Package-Manager/packages.md","filePath":"zh/Package-Manager/packages.md","lastUpdated":1736837027000}'),e={name:"zh/Package-Manager/packages.md"};function t(h,s,p,k,r,d){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="管理-ruyi-软件包" tabindex="-1">管理 Ruyi 软件包 <a class="header-anchor" href="#管理-ruyi-软件包" aria-label="Permalink to &quot;管理 Ruyi 软件包&quot;">​</a></h1><h2 id="刷新本地软件包缓存" tabindex="-1">刷新本地软件包缓存 <a class="header-anchor" href="#刷新本地软件包缓存" aria-label="Permalink to &quot;刷新本地软件包缓存&quot;">​</a></h2><p>获取远程软件源的内容并刷新本地软件包缓存，默认使用托管在 GitHub 上的镜像：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ruyi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span></code></pre></div><p>软件包缓存将存放在用户目录中，通常为 <code>~/.cache/ruyi/packages-index/</code> ；在 <code>XDG_CACHE_HOME</code> 环境变量被设置时，目录为 <code>$XDG_CACHE_HOME/ruyi/packages-index/</code> 。</p><h3 id="ruyi-update-拉取失败" tabindex="-1"><code>ruyi update</code> 拉取失败 <a class="header-anchor" href="#ruyi-update-拉取失败" aria-label="Permalink to &quot;\`\`ruyi update\`\` 拉取失败&quot;">​</a></h3><p>由于目前软件包索引信息托管于 GitHub 仓库，若出现仓库访问不稳定的情况，可在配置文件中配置使用 <a href="https://mirror.iscas.ac.cn/git/ruyisdk/packages-index.git" target="_blank" rel="noreferrer">备用仓库</a>。</p><p>Ruyi 包管理器的配置文件默认存放在 <code>~/.config/ruyi/config.toml</code>，在 <code>XDG_CONFIG_HOME</code> 被配置的时候为 <code>$XDG_CONFIG_HOME/ruyi/config.toml</code>。文件不存在可以自行建立。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[repo]</span></span>
<span class="line"><span>local = &quot;&quot;</span></span>
<span class="line"><span>remote = &quot;https://mirror.iscas.ac.cn/git/ruyisdk/packages-index.git&quot;</span></span>
<span class="line"><span>branch = &quot;main&quot;</span></span></code></pre></div><p>其中 <code>local</code> 为本地缓存目录， <code>remote</code> 为远程镜像源地址， <code>branch</code> 为镜像所在 git 分支。</p><p>保存配置后重新尝试刷新本地缓存：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ruyi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span></code></pre></div><h2 id="阅读新闻" tabindex="-1">阅读新闻 <a class="header-anchor" href="#阅读新闻" aria-label="Permalink to &quot;阅读新闻&quot;">​</a></h2><p>在上一节运行 <code>ruyi update</code> 刷新本地软件源时，您大概已经看到 Ruyi 包管理器列出了未读新闻（news item(s)）。从这里您可以及时了解到 ruyi 软件包的更新信息或发出的其他重要通知。</p><p>运行 <code>ruyi news list</code> 同样可以调出这个页面，不同的是它将显示所有新闻，而未读新闻在被支持的终端上会以绿色高亮显示。</p><p>您可以使用下面的命令来浏览、阅读新闻和标记已读：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ruyi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> news</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -h</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ruyi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> news</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ruyi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> news</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --new</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 仅列出未读新闻</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ruyi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> news</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> read</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -h</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ruyi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> news</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> read</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            # 阅读序号（ID）为 1 的新闻</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ruyi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> news</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> read</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              # 阅读全部未读新闻</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ruyi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> news</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> read</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --quiet</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 不输出任何东西，只标记未读新闻为已读</span></span></code></pre></div><p>Ruyi 通过在 <code>~/.local/state/ruyi/news.read.txt</code> 中存储新闻标题来标记已读新闻，在 <code>XDG_STATE_HOME</code> 被配置时文件路径为 <code>$XDG_STATE_HOME/ruyi/news.read.txt</code>。</p><h2 id="列出软件包" tabindex="-1">列出软件包 <a class="header-anchor" href="#列出软件包" aria-label="Permalink to &quot;列出软件包&quot;">​</a></h2><p>Ruyi 软件包大致分为几个分区：</p><ul><li>toolchain 工具链</li><li>source 源码包</li><li>emulator 模拟器</li><li>board-image 系统镜像</li><li>analyzer 分析工具</li><li>extra 其他</li></ul><p>软件包的版本号严格遵循 Semver 的规范，这使它们和上游版本可能有一些差别。</p><p>软件包分为正式发布的软件包和预发布的软件包（prerelease），预发布的软件包的释出会比上游正式发布该版本要早，但是修复了最新已发布版本的 bug。</p><p>一些发布时间较早的 Ruyi 软件包还引入了 slug 来标记版本，这是一个被废弃的特性，会在未来彻底删除。</p><p>使用 <code>ruyi list</code> 命令列出所有可用的软件包，注意即使某个软件包/版本并不支持当前架构的系统，它依然会被列出。</p><p>这是在 <code>x86_64</code> 机器上的一个示例，实际的列表会更长：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ruyi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> of</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> available</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> packages:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> source/milkv-duo-examples</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0.20240719.0+git.52ae647a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (latest)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> source/ruyisdk-demo</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.20231114.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (latest)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> source/coremark</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1.0.2-pre.20230125</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (prerelease, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">latest-prerelease</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (latest)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> toolchain/llvm-plct</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 17.0.6-ruyi.20240511</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (latest)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> toolchain/llvm-upstream</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 17.0.5-ruyi.20231121</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (latest) slug: llvm-upstream-20231121</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> toolchain/gnu-milkv-milkv-duo-elf-bin</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0.20240731.0+git.67688c7335e7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (latest)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> analyzer/dynamorio-riscv</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 10.93.19979-ruyi.20240914</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (latest, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">no</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> binary</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> current</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> host</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 10.0.19748-ruyi.20240128</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (no </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">binary</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> current</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> host</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> board-image/uboot-revyos-sipeed-lc4a-8g</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.20240127.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (latest)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> board-image/uboot-oerv-sipeed-lpi4a-8g</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.2309.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (latest)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> board-image/canmv-linux-sdk-demo-canaan-k230d-rv64ilp32</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.20240731.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (latest)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.20240717.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> emulator/qemu-user-riscv-xthead</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 6.1.0-ruyi.20231207+g03813c9fe8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (latest)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> emulator/box64-upstream</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0.3.1-pre.ruyi.20240901+git.9178effd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (prerelease, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">latest-prerelease,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> no</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> binary</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> current</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> host</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0.3.0-ruyi.20240718</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (latest, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">no</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> binary</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> current</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> host</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0.2.9-pre.ruyi.20240702+git.4b0b3fc9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (prerelease, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">no</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> binary</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> current</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> host</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0.2.8-ruyi.20240702</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (no </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">binary</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> current</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> host</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> emulator/qemu-user-riscv-upstream</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 8.2.0-ruyi.20240128</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (latest)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 8.1.2-ruyi.20231121</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> extra/wps-office</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 12.1.0-r.17900</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (latest)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 12.1.0-r.17885</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ()</span></span></code></pre></div><p><code>list</code> 命令还提供了 <code>--verbose</code> 或 <code>-v</code> 参数来输出更详细的信息，这将会打印软件源中几乎所有信息。由于输出将会很长，建议将输出重定向到文件或 <code>less</code> 等工具。</p><p>类似于 <code>toolchain/llvm-plct</code> 的行表示了一个软件包名，这在使用 <code>install</code> 命令安装时需要指定该名称。大多数情况下仅仅指定 <code>/</code> 后的名称也是可以的，在该示例中就是 <code>llvm-plct</code>。</p><p>在软件包名后跟随了一个版本号列表。版本号可以用于指定安装某个软件包的某个版本或符合给出表达式的版本。版本号后面括号中的内容则标记了该版本的一些信息。</p><h3 id="latest" tabindex="-1"><code>latest</code> <a class="header-anchor" href="#latest" aria-label="Permalink to &quot;\`\`latest\`\`&quot;">​</a></h3><p>用于标记某个软件包的最新版本，这也是 <code>install</code> 命令默认安装的版本。</p><h3 id="prerelease" tabindex="-1"><code>prerelease</code> <a class="header-anchor" href="#prerelease" aria-label="Permalink to &quot;\`\`prerelease\`\`&quot;">​</a></h3><p>预发布的版本。这意味着该软件包先于上游发布了这一版本，新版本往往修复了旧版本的 bug，特别当一个预发布版本被认为有必要时。</p><p>默认情况下 Ruyi 包管理器会忽略预发布版本。您可以配置 Ruyi 包管理器安装预发布版本，但是需要自行承担其中隐含的风险。</p><h3 id="latest-prerelease" tabindex="-1"><code>latest-prerelease</code> <a class="header-anchor" href="#latest-prerelease" aria-label="Permalink to &quot;\`\`latest-prerelease\`\`&quot;">​</a></h3><p>最新的预发布版本。在允许安装预发布版本，且该版本比 <code>latest</code> 版本更新时，这会是 <code>install</code> 命令默认安装的版本。</p><p>如果您确实需要安装一个预发布版本，可以在配置文件中添加配置：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[packages]</span></span>
<span class="line"><span>prereleases = true</span></span></code></pre></div><h3 id="no-binary-for-current-host" tabindex="-1"><code>no binary for current host</code> <a class="header-anchor" href="#no-binary-for-current-host" aria-label="Permalink to &quot;\`\`no binary for current host\`\`&quot;">​</a></h3><p>这表示该软件包版本没有提供用于本机架构的二进制包。</p><p>在某些场景下本身就应当安装非本机架构的软件包，如在 riscv64 机器上使用 box64 运行 WPS Office。</p><p>此时可以指定安装某个架构的二进制软件包：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ruyi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --host</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> x86_64</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wps-office</span></span></code></pre></div><h2 id="安装二进制软件包" tabindex="-1">安装二进制软件包 <a class="header-anchor" href="#安装二进制软件包" aria-label="Permalink to &quot;安装二进制软件包&quot;">​</a></h2><p>通常下列分区的软件包会是二进制包</p><ul><li>toolchain 工具链</li><li>emulator 模拟器</li><li>board-image 系统镜像</li><li>analyzer 分析工具</li><li>extra 其他</li></ul><p>这些软件包可以使用 <code>install</code> 命令安装，如安装 GNU 上游 gcc 工具链：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ruyi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gnu-upstream</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ruyi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> toolchain/gnu-upstream</span></span></code></pre></div><p>上述通过指定软件包名安装的方式默认会安装标记为 latest 版本的 gnu-upstream 包，如果想安装某个历史版本的 gnu-upstream，则可以通过指定版本来安装：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ruyi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;gnu-upstream(0.20231118.0)&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ruyi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;gnu-upstream(&gt;=0.20231118.0)&#39;</span></span></code></pre></div><p>表达式支持 <code>&lt;</code>、 <code>&gt;</code>、<code>==</code>、 <code>&lt;=</code>、 <code>&gt;=</code>、 <code>!=</code> 运算符。</p><p>如果希望安装多个包：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ruyi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gnu-plct</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gnu-upsteam</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> llvm-plct</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> llvm-upstream</span></span></code></pre></div><p>在一些特殊情况下，如错误删除了已安装软件包的文件，则可以重新安装这个软件包来恢复：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ruyi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --reinstall</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gnu-upstream</span></span></code></pre></div><p>包管理器下载的包存放在 <code>~/.cache/ruyi/distfiles/</code> 下，在 <code>XDG_CACHE_HOME</code> 被指定时为 <code>$XDG_CACHE_HOME/ruyi/distfiles/</code>。这些包通常以已压缩的格式存在，需要调用系统工具解包。在系统中缺少对应的工具时将打印相应的警告。</p><p><code>install</code> 命令默认情况下只会安装和本机架构相同的二进制包，解包后的二进制包存放在 <code>~/.local/share/ruyi/binaries/$(uname -m)/</code> 目录下，在 <code>XDG_DATA_HOME</code> 被指定时为 <code>$XDG_DATA_HOME/ruyi/binaries/$(uname -m)/</code>。</p><p>由于系统镜像也是二进制文件，也可以使用 <code>install</code> 命令执行下载和解包。不过通常情况下这些包配合 Ruyi 的镜像刷写功能使用。解包后的镜像文件存放在 <code>~/.local/share/ruyi/blobs/</code> 目录下，在 <code>XDG_DATA_HOME</code> 被指定时为 <code>$XDG_DATA_HOME/ruyi/blobs/</code>。</p><h2 id="安装源码包" tabindex="-1">安装源码包 <a class="header-anchor" href="#安装源码包" aria-label="Permalink to &quot;安装源码包&quot;">​</a></h2><p>下列分区的软件包显然是源码包</p><ul><li>source 源码包</li></ul><p>源码包可以使用 <code>extract</code> 命令下载一个源码包并解包到当前目录：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ruyi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> extract</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ruyisdk-demo</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">README.md</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  rvv-autovec</span></span></code></pre></div><p><code>extract</code> 命令支持和 <code>install</code> 相同的版本表达方式。</p><h2 id="卸载软件包" tabindex="-1">卸载软件包 <a class="header-anchor" href="#卸载软件包" aria-label="Permalink to &quot;卸载软件包&quot;">​</a></h2><p>Ruyi 包管理器没有实现卸载指定 Ruyi 软件包的功能，但是您可以使用如下命令删除所有已经下载和安装的软件包：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ruyi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> self</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clean</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --distfiles</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --installed-pkgs</span></span></code></pre></div><p>如果您执意要删除某个软件包，虽然不建议，但是您可以手动删除它们。如果错误删除了一些文件，但是 Ruyi 依然认为该软件包已经安装，可以尝试使用 <code>install --reinstall</code> 恢复。</p><p>注意，如果某个工具链软件包被删除，已经建立的依赖该包的虚拟环境将失效，且激活该编译环境时并不会有相关警告。</p>`,70)]))}const o=i(e,[["render",t]]);export{c as __pageData,o as default};
