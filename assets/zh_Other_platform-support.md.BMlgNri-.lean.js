import{_ as l,c as u,a2 as r,o as e}from"./chunks/framework.oYgP5hCw.js";const R=JSON.parse('{"title":"RuyiSDK 的平台支持情况","description":"","frontmatter":{},"headers":[],"relativePath":"zh/Other/platform-support.md","filePath":"zh/Other/platform-support.md","lastUpdated":1736837027000}'),t={name:"zh/Other/platform-support.md"};function o(p,i,n,a,s,S){return e(),u("div",null,i[0]||(i[0]=[r('<h1 id="ruyisdk-的平台支持情况" tabindex="-1">RuyiSDK 的平台支持情况 <a class="header-anchor" href="#ruyisdk-的平台支持情况" aria-label="Permalink to &quot;RuyiSDK 的平台支持情况&quot;">​</a></h1><p>出于项目管理等现实因素，如 RuyiSDK 项目需求方的要求、团队支持成本考量等等，RuyiSDK 团队对市面上的处理器架构、操作系统及其发行版采取分级（tiered）的平台支持策略。</p><p>为叙述方便，我们约定以粗体排版的“尽力”一词（形如：<strong>尽力</strong>）指：如 RuyiSDK 团队或第三方注意到任何不符合预期的情况，则该情况将得到修复。</p><p>本文档最后更新于 2024 年 11 月。RuyiSDK 项目需求方及 RuyiSDK 团队目前对本文档的内容与修订保留解释权。</p><h2 id="处理器架构" tabindex="-1">处理器架构 <a class="header-anchor" href="#处理器架构" aria-label="Permalink to &quot;处理器架构&quot;">​</a></h2><p>RuyiSDK 的处理器架构支持程度共三级。</p><ul><li>一级（Tier 1）：保证可用（guaranteed to work）的架构支持。 <ul><li>将为该等级架构提供单可执行文件形式的 RuyiSDK 包管理器，以便用户尝鲜。</li><li>RuyiSDK 官方软件源将为该等级架构在合理范围全面地提供二进制包。</li><li>RuyiSDK 的 CI 将为该等级架构提供全面的自动化质量保障。</li><li>RuyiSDK 主线将接受关于该等级架构的代码等贡献。</li></ul></li><li>二级（Tier 2）：尽力而为（best-effort）的架构支持。 <ul><li>将<strong>尽力</strong>为该等级架构提供单可执行文件形式的 RuyiSDK 包管理器。</li><li>RuyiSDK 官方软件源将<strong>尽力</strong>为该等级架构在合理范围提供二进制包。</li><li>RuyiSDK CI 将<strong>尽力</strong>为该等级架构提供自动化质量保障。</li><li>RuyiSDK 主线将<strong>尽力</strong>接受关于该等级架构的代码等贡献。</li></ul></li><li>三级（Tier 3）：非官方支持。 <ul><li>RuyiSDK 团队不主动为该等级架构出品二进制包。</li><li>RuyiSDK CI 不主动为该等级架构提供自动化质量保障。</li><li>RuyiSDK 主线原则上接受关于该等级架构的代码等贡献，但基于一事一议原则，出于维护成本等考量，也可能不接受。</li><li>RuyiSDK 团队欢迎社区力量自发为有需要的架构维护“平行宇宙”的 RuyiSDK 基础设施。</li></ul></li></ul><p>可以将一级与二级支持架构统称为“官方支持架构”，将三级支持架构称为“非官方支持架构”。</p><p>当前的处理器架构支持情况如下。每一等级内的架构按字母顺序排列。</p><p><strong>一级（Tier 1）：</strong></p><ul><li>RISC-V 64</li><li>x86_64</li></ul><p><strong>二级（Tier 2）：</strong></p><ul><li>AArch64</li></ul><p><strong>三级（Tier 3）：</strong></p><p>以上未提及的架构均属于该等级。</p><p>对于三级架构，RuyiSDK 团队可能无法为其提供 RuyiSDK 包管理器，或在 RuyiSDK 官方软件源为其提供二进制包。确有需要的用户可以自行组织起来，提供本架构的“平行宇宙” RuyiSDK 软件源、包管理器移植等基础设施。“平行宇宙”是指与 RuyiSDK 团队无关，但仍然试图在一定程度上与 RuyiSDK 官方维持行为一致的独立分支（fork）。</p><p>在打包时，RuyiSDK 团队鼓励这些项目在软件包名、版本、构建参数等方面与官方软件源保持一致或兼容；但作为平等地位的主体，亦承认无法对此作强制要求。</p><h2 id="操作系统与发行版" tabindex="-1">操作系统与发行版 <a class="header-anchor" href="#操作系统与发行版" aria-label="Permalink to &quot;操作系统与发行版&quot;">​</a></h2><p>RuyiSDK 的操作系统支持程度也分为三级。</p><ul><li>一级（Tier 1）：保证可用（guaranteed to work）的系统支持。 <ul><li>保证 RuyiSDK 包管理器在该等级系统可用。</li><li>保证 RuyiSDK 官方软件源内的软件包在该等级系统可用。</li></ul></li><li>二级（Tier 2）：尽力而为（best-effort）的系统支持。 <ul><li><strong>尽力</strong>保证 RuyiSDK 包管理器在该等级系统可用。</li><li><strong>尽力</strong>保证 RuyiSDK 官方软件源内的软件包在该等级系统可用。</li></ul></li><li>三级（Tier 3）：非官方支持。 <ul><li>不主动保证 RuyiSDK 包管理器在该等级系统可用。</li><li>不主动保证 RuyiSDK 官方软件源内的软件包在该等级系统可用。</li><li>即使系统的处理器架构处于一级或二级的支持等级，上述两条也成立。</li><li>RuyiSDK 主线原则上接受关于该等级系统的代码等贡献，但基于一事一议原则，出于维护成本等考量，也可能不接受。</li><li>RuyiSDK 团队欢迎社区力量自发为有需要的系统维护“平行宇宙”的 RuyiSDK 基础设施。</li></ul></li></ul><p>可以将一级与二级支持系统（发行版）统称为“官方支持系统（发行版）”，将三级支持系统（发行版）称为“非官方支持系统（发行版）”。</p><p>当前的操作系统、发行版支持情况如下。每一等级内的发行版按字母顺序排列。</p><p><strong>一级（Tier 1）：</strong></p><ul><li>Debian: 最近 1 个版本。 <ul><li>Debian 12</li></ul></li><li>openEuler: 最近 1 个长期支持（LTS）版本。 <ul><li>openEuler 24.03 LTS</li></ul></li><li>RevyOS: 与 LicheePi 4A 及 Pioneer Box 的 RevyOS 支持对齐。</li><li>RuyiOS: 最近 1 个版本。</li><li>Ubuntu: 最近 2 个长期支持（LTS）版本。 <ul><li>Ubuntu 22.04</li><li>Ubuntu 24.04</li></ul></li></ul><p><strong>二级（Tier 2）：</strong></p><ul><li>Arch Linux: 跟随滚动。</li><li>deepin: 最近 1 个版本。 <ul><li>deepin 23</li></ul></li><li>Fedora: 近 1 年内发布的版本。 <ul><li>Fedora 40</li><li>Fedora 41</li></ul></li></ul><p>种类上属于 Tier 1 或 Tier 2，但版本不在相应提及范围内的 Linux 发行版的具体版本，也属于该等级。</p><p><strong>三级（Tier 3）：</strong></p><p>未在 Tier 1 或 Tier 2 中提及的 Linux 发行版，以及非 Linux 内核的操作系统，均属于该等级。</p><p>对于官方支持架构上的三级 Linux 发行版，RuyiSDK 包管理器及 RuyiSDK 官方软件源提供的软件包仍有可能在其上正常运行，但我们对此不作自动化的保证。</p><p>对于官方支持架构上的其余操作系统，如 macOS 或 Windows，如要在其上使用 RuyiSDK 团队的官方产品，用户将需要自行配置 Linux 环境；确有需要的用户可以自行组织起来，在 RuyiSDK 各组件的分支（fork）加入并维护相应操作系统的支持。</p>',31)]))}const D=l(t,[["render",o]]);export{R as __pageData,D as default};
