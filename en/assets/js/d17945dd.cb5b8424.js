"use strict";(self.webpackChunkruyisdk=self.webpackChunkruyisdk||[]).push([[2579],{89478:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=t(74848),l=t(28453);const i={title:"RV64ILP32 bare-metal toolchain & profile now available",authors:["white"]},o="RV64ILP32 bare-metal toolchain & profile now available",s={permalink:"/docs/en/blog/2024/02/26/gnu-plct-rv64ilp32-elf",source:"@site/i18n/en/docusaurus-plugin-content-blog/2024-02-26-gnu-plct-rv64ilp32-elf.md",title:"RV64ILP32 bare-metal toolchain & profile now available",description:"For your convenience following bleeding-edge development, the RuyiSDK team",date:"2024-02-26T00:00:00.000Z",tags:[],readingTime:1.5,hasTruncateMarker:!1,authors:[{name:"xen0n",title:"RuyiSDK \u6280\u672f\u4e3b\u7ba1",url:"https://github.com/xen0n",imageURL:"https://avatars.githubusercontent.com/u/1175567?v=4",key:"white"}],frontMatter:{title:"RV64ILP32 bare-metal toolchain & profile now available",authors:["white"]},unlisted:!1,prevItem:{title:"Release notes for RuyiSDK 0.9",permalink:"/docs/en/blog/2024/04/23/ruyi-0.9"},nextItem:{title:"New board images available (2024-01-29)",permalink:"/docs/en/blog/2024/01/29/new-board-images"}},r={authorsImageUrls:[void 0]},c=[{value:"Usage example",id:"usage-example",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["For your convenience following bleeding-edge development, the RuyiSDK team\nhas packaged a bare-metal toolchain targetting the experimental RV64ILP32 ABI.\nBecause this is a bare-metal toolchain, no sysroot is provided, and multilib\nis not enabled: the ABI to use is ",(0,a.jsx)(n.code,{children:"ilp32d"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"usage-example",children:"Usage example"}),"\n",(0,a.jsx)(n.p,{children:"Given the following C program:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-c",children:"// test.c\nlong long add(long long *a, long long b)\n{\n    return *a + b;  // Should be realized with `ld` and `add`\n}\n\nvoid check(int);\n\nvoid check_sizes(void)\n{\n    check(sizeof(int));        // a0 should be 4\n    check(sizeof(long));       // a0 should be 4\n    check(sizeof(long long));  // a0 should be 8\n    check(sizeof(void *));     // a0 should be 4\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"We can now build object code conforming to the RV64ILP32 ABI with the proper\ntoolchain package and profile:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell-session",children:"$ ruyi update\n$ ruyi install gnu-plct-rv64ilp32-elf\n$ ruyi venv -t gnu-plct-rv64ilp32-elf --without-sysroot baremetal-rv64ilp32 /tmp/venv\n$ source /tmp/venv/bin/ruyi-activate\n$ /tmp/venv11/bin/riscv64-plct-elf-gcc -O2 -c -o test.o test.c\n"})}),"\n",(0,a.jsx)(n.p,{children:"Checking that everything works as intended:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell-session",children:"$ riscv64-plct-elf-readelf -h test.o | grep 32\n  Class:                             ELF32\n  Flags:                             0x25, RVC, X32, double-float ABI\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell-session",children:"$ riscv64-plct-elf-objdump -dw test.o\n\ntest.o:     file format elf32-littleriscv\n\n\nDisassembly of section .text:\n\n00000000 <add>:\n   0:   6108                    ld      a0,0(a0)\n   2:   952e                    add     a0,a0,a1\n   4:   8082                    ret\n\n00000006 <check_sizes>:\n   6:   3141                    addiw   sp,sp,-16\n   8:   4511                    li      a0,4\n   a:   e406                    sd      ra,8(sp)\n   c:   00000097                auipc   ra,0x0\n  10:   000080e7                jalr    ra # c <check_sizes+0x6>\n  14:   4511                    li      a0,4\n  16:   00000097                auipc   ra,0x0\n  1a:   000080e7                jalr    ra # 16 <check_sizes+0x10>\n  1e:   4521                    li      a0,8\n  20:   00000097                auipc   ra,0x0\n  24:   000080e7                jalr    ra # 20 <check_sizes+0x1a>\n  28:   60a2                    ld      ra,8(sp)\n  2a:   4511                    li      a0,4\n  2c:   2141                    addiw   sp,sp,16\n  2e:   00000317                auipc   t1,0x0\n  32:   00030067                jr      t1 # 2e <check_sizes+0x28>\n"})}),"\n",(0,a.jsx)(n.p,{children:"It can thus be shown that the toolchain indeed generates object code with\n32-bit pointer width, but also leveraging RV64 capabilities."})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var a=t(96540);const l={},i=a.createContext(l);function o(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:o(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);